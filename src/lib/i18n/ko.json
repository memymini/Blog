{
  "nav_about": "ABOUT",
  "nav_projects": "PROJECT",
  "nav_experience": "EXPERIENCE",
  "nav_contact": "CONTACT",
  "resume": "RESUME",
  "email_copied": "이메일이 복사되었습니다!",
  "role": "Web Developer",
  "title": "MINHEE JUNG",
  "name": "정민희",
  "about": {
    "intro": {
      "title": "About",
      "paragraphs": [
        "불확실성에서 오는 긴장과 설렘을 즐기며, 더 나은 방향을 찾아가는 개발자입니다. React, Next.js, TypeScript 기반 웹 애플리케이션을 개발합니다.",
        "✦ 상황에 맞는 AI 도구를 상황에 맞게 활용해 아이디어를 빠르게 프로토타이핑합니다.",
        "✦ 확장성과 유지보수성을 고려한 구조적인 코드를 지향합니다.",
        "✦ 문제를 빠르게 공유하고, 팀원들과의 소통을 통해 함께 해결해 나갑니다."
      ]
    },
    "education": {
      "title": "Education",
      "items": [
        {
          "institution": "동국대학교",
          "description": "컴퓨터공학전공 · 2022.03 - 2026.02 (졸업예정)"
        },
        {
          "institution": "코드잇",
          "description": "프론트엔드 부트캠프 단기심화 수료 · 2025.07 - 2025.08"
        }
      ]
    },
    "tech_title": "Tech Skills",
    "collaboration_title": "Collaboration Tools",
    "ai_title": "AI Tools",
    "likes": {
      "title": "Things what I like",
      "items": ["고양이 만지기🐱", "요리하기🍳", "자전거타기🚲"]
    }
  },
  "experiences": [
    {
      "role": "구름톤",
      "org": "구름톤 유니브",
      "period": "2025.08",
      "bullets": ["온라인 자격 인증 서비스 'Veribadge' 개발"]
    },
    {
      "role": "프론트엔드 부트캠프(FESI)",
      "org": "코드잇",
      "period": "2025.07",
      "bullets": [
        "팀 스터디 기반 Todo List 웹 서비스 개발",
        "백엔드 및 디자이너와 협업 경험"
      ]
    },
    {
      "role": "종합설계",
      "org": "동국대학교",
      "period": "2025.03",
      "bullets": ["ITSM(Service Desk) 시스템 MSW 전환 프로젝트 개발"]
    },
    {
      "role": "교환학생",
      "org": "Fontys University of Applied Sciences",
      "period": "2024.09",
      "bullets": ["문화적 양극화 문제 해결을 위한 모바일 솔루션 개발"]
    },
    {
      "role": "캠푸톤",
      "org": "동국대학교",
      "period": "2024.08",
      "bullets": ["오늘의 공강 챌린지 '오공챌' 프론트엔드 개발 (최우수상)"]
    },
    {
      "role": "공개SW 프로젝트",
      "org": "동국대학교",
      "period": "2024.03",
      "bullets": [
        "정치적 중립 기사 제공 서비스 'GENTLE(Generate Neutral News)' 개발"
      ]
    },
    {
      "role": "SWF(Seoul Web3 Festival)",
      "org": "서울시",
      "period": "2023.07",
      "bullets": ["블록체인 기반 기부 서비스 '기부런' 퍼블리싱 및 기획 참여"]
    }
  ],
  "lang_toggle": "EN",
  "detail_back_to_projects": "← 프로젝트 목록으로",
  "detail_team_size": "{size}인 팀",
  "detail_summary_title": "요약",
  "detail_built_title": "구현 내용",
  "detail_arch_title": "아키텍처",
  "detail_challenges_title": "문제 및 해결 과정",
  "detail_problem": "문제",
  "detail_cause": "원인",
  "detail_solution": "해결",
  "detail_impact": "결과",
  "detail_lessons": "배운 점",
  "detail_screenshots_title": "스크린샷",
  "projects": [
    {
      "slug": "digora",
      "title": "Digora",
      "tagline": "여론조사 서비스",
      "description": "상시적 직접민주주의의 가능성을 실험하는 디지털 공론장",
      "tech": [
        "Next.js",
        "TypeScript",
        "Tailwind",
        "Tanstack Query",
        "Supabase"
      ],
      "image": "/images/digora.png",
      "detail": {
        "period": "2025.09 —",
        "role": ["Full Stack"],
        "teams": "개발자 1명 / 기획 1명",
        "links": [
          {
            "label": "GitHub",
            "href": "https://github.com/memymini/Digora.git"
          },
          { "label": "Live", "href": "https://digora.kr" }
        ],
        "summary": "기존의 전통적인 여론조사에서 벗어나, 직관적으로 선택하고 즉시 통계를 확인할 수 있는 인터랙티브 여론조사 플랫폼이다.",
        "responsibilities": [
          "Next.js 및 Supabase를 사용하여 서비스의 전체 구조 설계 및 풀스택 개발",
          "Supabase를 사용해 데이터베이스, 스토리지, 인증, RLS 정책 설계 및 구축",
          "RPC 함수를 작성해 투표 통계(득표수, 비율, 연령·성별 분포 등)를 서버 단에서 계산 후 반환",
          "TanStack Query를 통한 데이터 흐름 관리 및 전역 로딩·에러 시스템 구성",
          "카카오 로그인 연동 및 사용자 인증 흐름(redirect, callback, token 관리) 구현"
        ],
        "challenges": [
          {
            "title": "Dynamic Route Segments 문제",
            "problem": "`Next.js 15`의 `App Router` 환경에서 `Route Handlers`를 사용하며 Dynamic Route Segments(예: `/votes/[id]/route.ts`)를 구현할 때, `params` 객체를 일반 객체로 바로 사용하려다 **런타임 에러**가 발생하였다.",
            "causes": [
              "`Next.js 15`에서는 `App Router`의 라우팅 컨텍스트(`params`, `searchParams`)가 Lazy Evaluation(지연 평가) 형태로 제공된다.",
              "이는 Next.js가 요청 시점에서 실제 동적 세그먼트 값을 resolve하기 위해 내부적으로 **비동기 파이프라인**(`async context`)을 사용하기 때문이다."
            ],
            "resolution": [
              "Next.js 15 공식 문서(App Router > Route Handlers > Context API)에서 변경된 인터페이스를 확인한 후, `params`를 비동기적으로 받아오는 방식으로 수정하였다.",
              "/images/digora-challenge-1.png"
            ],
            "lessons": [
              "`Next.js 15`의 `App Router`는 서버 컴포넌트, `Route Handlers`, `ISR(Incremental Static Regeneration)`이 모두 동일한 **비동기 파이프라인** 위에서 동작한다는 점을 명확히 이해하였다.",
              "단순히 API Route처럼 동작하는 것이 아니라, 서버 렌더링 컨텍스트 자체가 `Promise` 기반으로 지연 평가된다는 구조적 차이를 인식하였고, 이를 통해 향후 `Route Handlers` 설계 시 **비동기 컨텍스트 처리**에 대한 고려가 필요함을 학습하였다."
            ]
          },
          {
            "title": "Service 로직의 구조적 비효율 개선",
            "problem": "초기 개발 단계에서 데이터 조회와 가공을 모두 `service` 로직에서 처리하였다. 단일 테이블 조회에는 문제가 없었지만, 테이블 간 `Join`이 많거나 데이터 가공이 복잡한 로직의 경우 `service` 레이어에서 모든 데이터를 조합하면서 **응답 속도 저하** 및 **불필요한 네트워크 요청 증가**라는 비효율이 발생하였다.",
            "causes": [
              "`service` 단에서 과도한 데이터 가공: 여러 테이블(`votes`, `vote_options`, `ballots`, `comments` 등)을 각각 조회한 뒤 `service` 로직에서 합치는 방식으로 구현하였다.",
              "요청 횟수 증가로 인한 **비효율**: 좋아요 기능의 경우, 좋아요를 누른 후 상태를 확인하고 다시 반영하기 위해 두 번의 API 요청이 발생하였다."
            ],
            "resolution": [
              "비효율적인 `service` 로직을 개선하기 위해 일부 복잡한 로직을 **`Supabase`의 `RPC`(Remote Procedure Call)로 분리**하였다.",
              "**분리 기준:** 테이블 간 **Join**이 포함된 복잡한 쿼리,**요청 횟수**에 직접적인 영향을 주는 로직(예: 좋아요 상태 갱신 로직)"
            ],
            "lessons": [
              "서비스 아키텍처 설계 단계에서 **로직의 책임을 어디에 둘지 결정**하는 판단 기준 확립의 중요성을 학습하였다."
            ]
          }
        ],
        "demo": "https://www.youtube.com/embed/ZdOGjSVUtRk",
        "images": [
          {
            "src": "/images/veribadge-1.png",
            "alt": "veribadge 뱃지 관리 페이지"
          },
          { "src": "/images/veribadge-2.png", "alt": "veribadge 대시보드" },
          { "src": "/images/veribadge-3.png", "alt": "veribadge 인증센터" },
          { "src": "/images/veribadge-4.png", "alt": "veribadge 파일업로드" }
        ]
      }
    },
    {
      "slug": "modudo",
      "title": "Modudo",
      "tagline": "팀 스터디 기반 Todo List 서비스",
      "description": "스터디 그룹을 생성하여 스터디 목표 설정하고, 이에 따른 Todo List 및 진행 현황을 공유하는 서비스입니다.",
      "tech": [
        "Next.js",
        "TypeScript",
        "Tailwind",
        "Zustand",
        "Tanstack Query",
        "Zod",
        "MSW"
      ],
      "image": "/images/modudo.png",
      "detail": {
        "period": "2025.07 — 2025.08",
        "role": ["Frontend"],
        "teams": "프론트엔드 4명 / 백엔드 2명 / 디자인 1명",
        "links": [
          {
            "label": "GitHub",
            "href": "https://github.com/CODEIT-FESI-10-5/frontend.git"
          },
          { "label": "Live", "href": "https://modudu.vercel.app" }
        ],
        "summary": "소규모 스터디를 위한 스터디 관리 서비스이다. 스터디를 생성하여 스터디원을 초대하거나, 스터디에 참여할 수 있다. 공동의 스터디 목표를 설정하여 Todo List를 작성하고 다른 스터디원의 진행률을 확인할 수 있다. ",
        "responsibilities": [
          "로그인/회원가입, 사이드바, 마이페이지 반응형 구현",
          "Zod를 통한 회원가입, 로그인 폼 검증",
          "Zustand로 UI 전역 상태 관리",
          "Tanstack Query로 서버 상태/캐시 관리",
          "MSW를 사용하여 백엔드 API Mocking 및 API 연동 시간 단축",
          "Vercel 배포"
        ],
        "challenges": [
          {
            "title": "HttpOnly 쿠키 도메인 불일치 문제",
            "problem": "미들웨어에서 토큰을 가져온 후 다른 페이지로 이동 시 **토큰이 사라지는 문제가 발생**하였다.",
            "causes": [
              "백엔드 서버가 서브도메인을, 프론트엔드는 메인 도메인을 사용하였는데 백엔드에서 쿠키 도메인을 서브도메인으로 설정하여 **쿠키 도메인이 일치하지 않았다.**",
              "쿠키를 확인할 때 브라우저의 Application 탭에 대한 이해가 부족하여, 메인 도메인에서도 **쿠키를 받았다고 착각**하였다."
            ],
            "resolution": [
              "백엔드측에 요청해 **쿠키의 Domain 속성을 메인 도메인으로 변경**하여 프론트측에서 접근 가능하게 수정하였다."
            ],
            "lessons": [
              "로그인 세션 유지 원리와 도메인/쿠키 정책, 그리고 **서브도메인과 메인 도메인 간의 관계** 및 Domain 속성이 브라우저 접근 범위에 미치는 영향을 이해할 수 있었다.",
              "Application 탭에 쿠키가 표시된다고 해서 모든 도메인에서 접근 가능한 것은 아니며, 이는 실제 쿠키 접근 권한과는 별개의 시각화 도구라는 점을 학습하였다."
            ]
          },
          {
            "title": "TanStack Query 데이터 동기화 문제",
            "problem": "대시보드에서 **정보 변경 시** 사이드바에 **즉시 반영되지 않는 문제** 발생하였다.",
            "causes": [
              "**데이터 소스 이원화:** 사이드바와 대시보드가 동일 데이터를 사용하지만 서로 다른 API를 호출하고 캐시 처리를 해주지 않았다.",
              "**레이아웃 지속성:** 사이드바가 root layout에 고정되어 라우트 전환 시 재마운트/리패치가 트리거되지 않았다.",
              "**캐시 전략 부재:** 변경 이벤트 이후 관련 쿼리에 대한 무효화(invalidation)나 동기화 전략이 없었다."
            ],
            "resolution": [
              "**대안A:** 대시보드의 데이터 변경 시 사이드바 관련 쿼리를 **invalidateQuery로 무효화**하여 최신 데이터로 동기화",
              "**대안B:** 사이드바를 대시보드의 layout으로 이동",
              "위 두가지 방안을 고민하다가 **구조를 바꾸기보다는 캐시 일관성 규칙을 표준화하는 것**이 재사용성 및 유지보수성에서 더 낫다고 판단해 대안A를 선택하였다."
            ],
            "lessons": [
              "데이터 변경이 발생할 때 **캐시 정합성을 고려**해야 한다는 것을 학습하였다.",
              "**캐시를 무효화하는 방법**으로 `invalidate query` 이외에도 상황에 따라 `resetQueries`, `removeQueriey` 등 다양한 방식을 활용할 수 있음을 학습하였다."
            ]
          }
        ],
        "demo": "https://www.youtube.com/embed/OM25kmmn4Ww",
        "images": [
          { "src": "/images/modudo-1.png", "alt": "Modudo 대시보드" },
          { "src": "/images/modudo-2.png", "alt": "Modudo 마이페이지" }
        ]
      }
    }
  ]
}
