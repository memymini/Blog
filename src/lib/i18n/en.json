{
  "nav_about": "ABOUT",
  "nav_projects": "PROJECTS",
  "nav_experience": "EXPERIENCES",
  "nav_contact": "CONTACT",
  "resume": "RESUME",
  "email_copied": "Email copied to clipboard!",
  "role": "Web Developer",
  "title": "MINHEE JUNG",
  "name": "Minhee Jung",
  "about": {
    "intro": {
      "title": "About",
      "paragraphs": [
        "I’m a web developer who grows through the thrill of uncertainty. I build with React, TypeScript, and modern web technologies.",
        "✦ Leverage AI tools strategically for rapid prototyping",
        "✦ Prioritize clean architecture and code maintainability",
        "✦ Communicate proactively to keep the team aligned and unblocked"
      ]
    },
    "education": {
      "title": "Education",
      "items": [
        {
          "institution": "Dongguk University",
          "description": "B.S. in Computer Science · Mar 2022 - Feb 2026 (Expected)"
        },
        {
          "institution": "Codeit",
          "description": "Completed Frontend Bootcamp Intensive · Jul 2025 - Aug 2025"
        }
      ]
    },
    "tech_title": "Tech Stack",
    "collaboration_title": "Collaboration Tools",
    "ai_title": "AI Tools",
    "likes": {
      "title": "Things I like...",
      "items": ["Cats🐱", "Cooking🍳", "Working out💪", "Travel✈️", "Cycling🚲"]
    }
  },
  "experiences": [
    {
      "role": "Goormthon",
      "org": "Goormthon Univ",
      "period": "2025.08 — 2025.09",
      "bullets": [
        "Developed 'Veribadge', an online qualification verification service"
      ]
    },
    {
      "role": "Frontend Bootcamp (FESI)",
      "org": "Codeit",
      "period": "2025.07 — 2025.08",
      "bullets": [
        "Developed a team-study based Todo List web service",
        "Experienced collaboration with backend developers and designers"
      ]
    },
    {
      "role": "Capstone Design",
      "org": "Dongguk University",
      "period": "2025.03 — 2025.12",
      "bullets": [
        "Developed an ITSM (Service Desk) system migration project to MSW"
      ]
    },
    {
      "role": "Exchange Student",
      "org": "Fontys University of Applied Sciences",
      "period": "2024.09 — 2025.01",
      "bullets": [
        "Developed a mobile solution to enhance user engagement for Efteling theme park",
        "Developed a mobile platform for handling discarded toys at home",
        "Developed a quiz-based app to address cultural polarization issues"
      ]
    },
    {
      "role": "Campusthon",
      "org": "Dongguk University",
      "period": "2024.08",
      "bullets": [
        "Developed the frontend for 'O-Gong-Challenge', a daily challenge app for students with empty class slots (Grand Prize)"
      ]
    },
    {
      "role": "Open Source SW Project",
      "org": "Dongguk University",
      "period": "2024.03 — 2024.06",
      "bullets": [
        "Developed 'GENTLE (Generate Neutral News)', a service providing politically neutral news articles"
      ]
    },
    {
      "role": "Toy Project",
      "org": "LG Science Park",
      "period": "2023.09 — 2023.10",
      "bullets": [
        "Participated in developing 'Byeolse', a blockchain-based last will and testament service"
      ]
    },
    {
      "role": "SWF (Seoul Web3 Festival)",
      "org": "Seoul Metropolitan Government",
      "period": "2023.07 — 2023.08",
      "bullets": [
        "Participated in developing 'GibuRun', a blockchain-based donation service"
      ]
    }
  ],
  "lang_toggle": "KR",
  "detail_back_to_projects": "← Back to Projects",
  "detail_team_size": "Team of {size}",
  "detail_summary_title": "Summary",
  "detail_built_title": "Responsibilities",
  "detail_arch_title": "Architecture",
  "detail_challenges_title": "Challenges & Solutions",
  "detail_problem": "Problem",
  "detail_cause": "Cause",
  "detail_solution": "Solution",
  "detail_impact": "Result",
  "detail_lessons": "Lessons Learned",
  "detail_screenshots_title": "Screenshots",
  "projects": [
    {
      "slug": "digora",
      "title": "Digora",
      "tagline": "Interactive Polling Platform",
      "description": "A digital agora that experiments with the potential of continuous direct democracy.",
      "tech": [
        "Next.js",
        "TypeScript",
        "Tailwind",
        "Tanstack Query",
        "Supabase"
      ],
      "image": "/images/digora.png",
      "detail": {
        "period": "2025.09 —",
        "role": ["Full Stack"],
        "teams": "1 Developer / 1 Planner",
        "links": [
          {
            "label": "GitHub",
            "href": "https://github.com/memymini/Digora.git"
          },
          { "label": "Live", "href": "https://digora.kr" }
        ],
        "summary": "An interactive polling platform that moves away from traditional surveys, allowing users to vote intuitively and instantly view real-time results and statistics.",
        "responsibilities": [
          "Designed and implemented the full-stack architecture using Next.js and Supabase.",
          "Built Supabase database schemas, storage, authentication, and RLS policies.",
          "Created RPC functions to calculate and return voting statistics (counts, percentages, age/gender distribution) on the server side.",
          "Managed data flow and global loading/error states using TanStack Query.",
          "Integrated Kakao Login and implemented user authentication flow (redirect, callback, and token management)."
        ],
        "challenges": [
          {
            "title": "Dynamic Route Segments Issue",
            "problem": "When implementing Dynamic Route Segments (e.g., `/votes/[id]/route.ts`) with `Route Handlers` in `Next.js 15 App Router`, a **runtime error** occurred when attempting to use the `params` object directly as a normal object.",
            "causes": [
              "In `Next.js 15`, the routing context (`params`, `searchParams`) within the App Router is provided as a lazy-evaluated object.",
              "This happens because Next.js internally resolves dynamic segment values asynchronously through an **async context pipeline** during request handling."
            ],
            "resolution": [
              "After checking the official Next.js 15 documentation (App Router > Route Handlers > Context API), updated the implementation to retrieve `params` asynchronously.",
              "/images/digora-challenge-1.png"
            ],
            "lessons": [
              "Understood that `Next.js 15 App Router` operates its Server Components, `Route Handlers`, and ISR (Incremental Static Regeneration) all on the same **asynchronous context pipeline**.",
              "Recognized that it differs from traditional API Routes, since the entire server rendering context is **Promise-based and lazily evaluated**, emphasizing the importance of handling async contexts properly when designing `Route Handlers`."
            ]
          },
          {
            "title": "Improving Inefficient Service Logic Structure",
            "problem": "In the early stage, both data retrieval and processing were handled entirely within the `service` layer. While this was fine for simple queries, complex joins across multiple tables led to **slow responses** and **unnecessary network calls**.",
            "causes": [
              "Excessive data processing in the `service` layer: multiple tables (`votes`, `vote_options`, `ballots`, `comments`, etc.) were queried separately and then merged within the `service` logic.",
              "Inefficient network requests: for example, the 'like' feature required two separate API calls — one to toggle the like state and another to fetch the updated result."
            ],
            "resolution": [
              "Refactored inefficient `service` logic by offloading complex operations to **`Supabase RPC` (Remote Procedure Call)**.",
              "**Separation Criteria:** Queries involving complex **joins**, or logic that directly affects the **number of network requests** (e.g., updating like status)."
            ],
            "lessons": [
              "Learned the importance of defining **clear boundaries of responsibility between service and database layers** during architectural design."
            ]
          }
        ],
        "demo": "https://www.youtube.com/embed/ZdOGjSVUtRk",
        "images": [
          {
            "src": "/images/veribadge-1.png",
            "alt": "Veribadge badge management page"
          },
          { "src": "/images/veribadge-2.png", "alt": "Veribadge dashboard" },
          {
            "src": "/images/veribadge-3.png",
            "alt": "Veribadge verification center"
          },
          {
            "src": "/images/veribadge-4.png",
            "alt": "Veribadge file upload page"
          }
        ]
      }
    },
    {
      "slug": "modudo",
      "title": "Modudo",
      "tagline": "Team-Based Study Todo List Service",
      "description": "A collaborative study management service that allows users to create study groups, set shared goals, and track progress together.",
      "tech": [
        "Next.js",
        "TypeScript",
        "Tailwind",
        "Zustand",
        "Tanstack Query",
        "Zod",
        "MSW"
      ],
      "image": "/images/modudo.png",
      "detail": {
        "period": "2025.07 — 2025.08",
        "role": ["Frontend"],
        "teams": "4 Frontend / 2 Backend / 1 Designer",
        "links": [
          {
            "label": "GitHub",
            "href": "https://github.com/CODEIT-FESI-10-5/frontend.git"
          },
          { "label": "Live", "href": "https://modudu.vercel.app" }
        ],
        "summary": "A study management platform for small groups. Users can create or join study teams, set shared goals, manage todos, and monitor each member’s progress.",
        "responsibilities": [
          "Implemented responsive UI for login/signup, sidebar, and My Page.",
          "Validated login/signup forms using Zod.",
          "Managed global UI state using Zustand.",
          "Handled server state and caching with TanStack Query.",
          "Used MSW to mock API responses and accelerate integration testing.",
          "Deployed the application on Vercel."
        ],
        "challenges": [
          {
            "title": "HttpOnly Cookie Domain Mismatch",
            "problem": "After retrieving a token via middleware, **the token disappeared when navigating to another page**.",
            "causes": [
              "The backend used a subdomain while the frontend used the main domain, and the cookie’s domain was set to the subdomain, causing **a domain mismatch**.",
              "While inspecting cookies in the browser’s Application tab, it was **mistakenly assumed** that cookies were shared with the main domain due to misunderstanding of the tab’s behavior."
            ],
            "resolution": [
              "Requested the backend to **update the cookie Domain property to the main domain**, enabling proper access from the frontend."
            ],
            "lessons": [
              "Gained a deeper understanding of **login session persistence, domain/cookie policy**, and how the `Domain` attribute defines cookie accessibility between subdomains and main domains.",
              "Learned that the Application tab merely visualizes stored cookies — it does **not** reflect actual cross-domain accessibility."
            ]
          },
          {
            "title": "TanStack Query Data Synchronization Issue",
            "problem": "When updating data in the dashboard, **changes were not immediately reflected in the sidebar.**",
            "causes": [
              "**Data Source Duplication:** The sidebar and dashboard shared the same data but fetched it through separate APIs without cache synchronization.",
              "**Layout Persistence:** The sidebar was fixed in the root layout, so route transitions did not trigger remount or refetch.",
              "**Lack of Cache Strategy:** There was no invalidation or synchronization mechanism after data updates."
            ],
            "resolution": [
              "**Option A:** Invalidate sidebar-related queries using `invalidateQuery` whenever data changes in the dashboard to keep data synchronized.",
              "**Option B:** Move the sidebar under the dashboard layout.\n\nAfter consideration, **Option A** was chosen for better maintainability and reusability by establishing a standardized cache consistency rule."
            ],
            "lessons": [
              "Learned that **components modifying data should take responsibility for cache consistency.**",
              "Understood that cache invalidation can be achieved not only with `invalidateQueries`, but also with methods like `resetQueries` or `removeQueries` depending on the use case."
            ]
          }
        ],
        "demo": "https://www.youtube.com/embed/OM25kmmn4Ww",
        "images": [
          { "src": "/images/modudo-1.png", "alt": "Modudo dashboard" },
          { "src": "/images/modudo-2.png", "alt": "Modudo My Page" }
        ]
      }
    }
  ]
}
